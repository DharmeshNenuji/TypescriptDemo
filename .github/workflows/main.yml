name: react-native-android-build-apk
on:
  push:
    branches:
      - master
# jobs:
  # Android-Release:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install npm dependencies
  #       run: |
  #         npm install
  #     - name: Run Lint
  #       run: |
  #         npm run linter
  #     - name: Cache Gradle
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.gradle/caches
  #         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
  #     - name: Set up JDK
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '11'
  #         distribution: 'adopt'
      
  #     # - name: Cache Gradle Dependencies
  #     #   uses: actions/cache@v2
  #     #   with:
  #     #     path: ~/.gradle/caches
  #     #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-gradle-

  #     - name: Grant execute permission for Gradle
  #       run: cd android && chmod +x ./gradlew

  #     - name: Gradle Clean
  #       run: cd android && ./gradlew clean

  #     - name: Build with Gradles
  #       run: cd android && ./gradlew assembleRelease

  #     - name: Upload APK TestApp.io
  #       uses: testappio/github-action@v5
  #       with:
  #         api_token: ${{secrets.DEMO_APP_IO_API_TOKEN}}
  #         app_id: ${{secrets.DEMO_APP_IO_APP_ID}}
  #         file: android/app/build/outputs/apk/release/app-release.apk
  #         release_notes: 'test release'
  #         git_release_notes: true
  #         include_git_commit_id: false
  #         notify: true


# build_with_signing:
#     runs-on: macos-latest
#     steps:
#       # this was more debug as was curious what came pre-installed
#       # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
#       - name: check Xcode version
#         run: /usr/bin/xcodebuild -version

#       - name: checkout repository
#         uses: actions/checkout@v3

#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#           P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

#       - name: build archive
#         run: |
#           xcodebuild -scheme "I am Groot" \
#           -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
#           -sdk iphoneos \
#           -configuration Debug \
#           -destination generic/platform=iOS \
#           clean archive          

#       - name: export ipa
#         env:
#           EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#         run: |
#           EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#           echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#           xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

#env variable change
# jobs:
#   IOS_RELEASE:
#     runs-on: macos-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Build and export iOS
#         uses: yukiarrr/ios-build-action@v1.4.0
#         with:
#           project-path: ios/TypeScriptDemo.xcodeproj
#           workspace-path: ios/TypeScriptDemo.xcworkspace
#           scheme: TypeScriptDemo
#           export-method: ad-hoc
#           configuration: Release
#           output-path: artifacts/output.ipa
#           p12-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#           certificate-password: ${{ secrets.P12_PASSWORD }}
#           mobileprovision-base64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#           code-signing-identity: ${{ secrets.KEYCHAIN_PASSWORD }}
#           team-id: ${{ secrets.TEAM_ID }}

      #  - name: Build Archive
      #   run: |
      #     xcodebuild -workspace $WORKPLACE -scheme $SCHEME -configuration $CONFIGURATION \
      #     archive -archivePath $ARCHIVE_PATH -allowProvisioningUpdates
      #     PROVISIONING_STYLE="Manual" \
      #     PROVISIONING_PROFILE={$BUILD_PROVISION_PROFILE_BASE64} \
      #     CODE_SIGN_STYLE="Manual" \
      #     CODE_SIGN_IDENTITY={$BUILD_CERTIFICATE_BASE64} \


# jobs:
#   build_with_signing:
#     runs-on: macos-latest
#     steps:
#       # this was more debug as was curious what came pre-installed
#       # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
#       - name: check Xcode version
#         run: /usr/bin/xcodebuild -version

#       - name: checkout repository
#         uses: actions/checkout@v3

#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#           P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

#       - name: build archive
#         run: |
#           xcodebuild -scheme "I am Groot" \
#           -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
#           -sdk iphoneos \
#           -configuration Debug \
#           -destination generic/platform=iOS \
#           clean archive          

#       - name: export ipa
#         env:
#           EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#         run: |
#           EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#           echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#           xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          


env:
  WORKSPACE: ${{ 'ios/TypeScriptDemo.xcworkspace' }}
  SCHEME: ${{ 'TypeScriptDemo' }}
  CONFIGURATION: ${{ 'Release' }}
  ARCHIVE_PATH: ${{ 'build/TypeScriptDemo.xcarchive' }}
  # EXPORT_PATH_STAGING: ${{ 'staging/' }}
  # EXPORT_PATH_PROD: ${{ 'prod/' }}
  # PLIST_PATH_STAGING: ${{'ios/MyApp/StagingExport.plist' }}
  # PLIST_PATH_PROD: ${{ 'ios/MyApp/ProdExport.plist' }}
  # APP_CENTER_TOKEN_PROD: ${{ secrets.APP_CENTER_TOKEN_MYAPP_IOS_PROD }}
  # APP_CENTER_TOKEN_STAGING: ${{ secrets.APP_CENTER_TOKEN_MYAPP_IOS_STAGING }}
  ARTIFACT_NAME: ${{ 'TypeScriptDemo.ipa' }}
  # ARTIFACT_PATH_STAGING: ${{ 'staging/' }}
  # ARTIFACT_PATH_PROD: ${{ 'prod/' }}
  # APP_NAME_STAGING: ${{ 'MyApp-iOS/ENV_STAGING' }}
  # APP_NAME_PROD: ${{ 'MyApp-iOS/ENV_PROD' }}
  # TESTING_GROUP_STAGING: ${{ 'ENV_STAGING' }}
  # TESTING_GROUP_PROD: ${{ 'ENV_PROD' }}
  # UPLOAD_FILE_STAGING: ${{ 'staging/MyApp.ipa' }}
  # UPLOAD_FILE_PROD: ${{ 'prod/MyApp.ipa' }}
  DISTRIBUTION_CERTIFICATE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
  DISTRIBUTION_PROFILE_PROD: ${{secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  DISTRIBUTION_PROFILE_STAGING: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  KEY_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}

jobs:
  build:
    name: Build
    runs-on: macos-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
          
      - name: Install dependencies
        run: npm install
        
      - name: Install pod dependencies
        run: |
          cd ios && pod install
      - name: Signing & Provisioning
        run: |
          # create variables
          CERT_PATH=$RUNNER_TEMP/dist_certificate.p12
          PP_PATH_PROD=$RUNNER_TEMP/dist_pp.mobileprovision
          PP_PATH_STAGING=$RUNNER_TEMP/dist_pp_adc.mobileprovision
          KCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  
          # import certificate and provisioning profile from secrets
          echo -n "$DISTRIBUTION_CERTIFICATE" | base64 - decode - output $CERT_PATH
          echo -n "$DISTRIBUTION_PROFILE_STAGING" | base64 - decode - output $PP_PATH_STAGING
          echo -n "$DISTRIBUTION_PROFILE_PROD" | base64 - decode - output $PP_PATH_PROD
          
          # create temporary keychain
          security create-keychain -p "$KEY_PWD" $KCHAIN_PATH
          security set-keychain-settings -lut 21600 $KCHAIN_PATH
          security unlock-keychain -p "$KEY_PWD" $KCHAIN_PATH
          
          # import certificate to keychain
          security import $CERT_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KCHAIN_PATH
          security list-keychain -d user -s $KCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH_PROD ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH_STAGING ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_13.2.1.app
        
      - name: Xcode Version
        run: /usr/bin/xcodebuild -version
        
      # - name: Create build folder
      #   run: |
      #   mkdir -p build && mkdir -p staging && mkdir -p prod
        
      - name: Build Archive
        run: |
          xcodebuild -workspace $WORKPLACE -scheme $SCHEME -configuration $CONFIGURATION \
          archive -archivePath $ARCHIVE_PATH -allowProvisioningUpdates
          PROVISIONING_STYLE="Manual" \
          PROVISIONING_PROFILE={$DISTRIBUTION_PROFILE_STAGING} \
          CODE_SIGN_STYLE="Manual" \
          CODE_SIGN_IDENTITY={$DISTRIBUTION_CERTIFICATE} \
      - name: Export STAGING
        run: |
          xcodebuild -exportArchive -archivePath $ARCHIVE_PATH -exportPath $EXPORT_PATH_STAGING . -exportOptionsPlist $PLIST_PATH_STAGING \
      - name: Export PROD
        run: |
          xcodebuild -exportArchive -archivePath $ARCHIVE_PATH -exportPath $EXPORT_PATH_PROD . -exportOptionsPlist $PLIST_PATH_PROD \
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ${{ env.ARTIFACT_PATH_STAGING }}
            ${{ env.ARTIFACT_PATH_PROD }}
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/dist_pp.mobileprovision
          rm ~/Library/MobileDevice/Provisioning\ Profiles/dist_pp_adc.mobileprovision