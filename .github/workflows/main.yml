name: react-native-android-build-apk
on:
  push:
    branches:
      - master
# jobs:
  # Android-Release:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install npm dependencies
  #       run: |
  #         npm install
  #     - name: Run Lint
  #       run: |
  #         npm run linter
  #     - name: Cache Gradle
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.gradle/caches
  #         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
  #     - name: Set up JDK
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '11'
  #         distribution: 'adopt'
      
  #     # - name: Cache Gradle Dependencies
  #     #   uses: actions/cache@v2
  #     #   with:
  #     #     path: ~/.gradle/caches
  #     #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-gradle-

  #     - name: Grant execute permission for Gradle
  #       run: cd android && chmod +x ./gradlew

  #     - name: Gradle Clean
  #       run: cd android && ./gradlew clean

  #     - name: Build with Gradles
  #       run: cd android && ./gradlew assembleRelease

  #     - name: Upload APK TestApp.io
  #       uses: testappio/github-action@v5
  #       with:
  #         api_token: ${{secrets.DEMO_APP_IO_API_TOKEN}}
  #         app_id: ${{secrets.DEMO_APP_IO_APP_ID}}
  #         file: android/app/build/outputs/apk/release/app-release.apk
  #         release_notes: 'test release'
  #         git_release_notes: true
  #         include_git_commit_id: false
  #         notify: true


# build_with_signing:
#     runs-on: macos-latest
#     steps:
#       # this was more debug as was curious what came pre-installed
#       # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
#       - name: check Xcode version
#         run: /usr/bin/xcodebuild -version

#       - name: checkout repository
#         uses: actions/checkout@v3

#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#           P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

#       - name: build archive
#         run: |
#           xcodebuild -scheme "I am Groot" \
#           -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
#           -sdk iphoneos \
#           -configuration Debug \
#           -destination generic/platform=iOS \
#           clean archive          

#       - name: export ipa
#         env:
#           EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#         run: |
#           EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#           echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#           xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          



  # IOS_RELEASE:
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Build and export iOS
  #       uses: yukiarrr/ios-build-action@v1.4.0
  #       with:
  #         project-path: ios/TypeScriptDemo.xcodeproj
  #         workspace-path: ios/TypeScriptDemo.xcworkspace
  #         scheme: TypeScriptDemo
  #         export-method: ad-hoc
  #         configuration: Release
  #         output-path: artifacts/output.ipa
  #         p12-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         certificate-password: ${{ secrets.P12_PASSWORD }}
  #         mobileprovision-base64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #         code-signing-identity: ${{ secrets.KEYCHAIN_PASSWORD }}
  #         team-id: ${{ secrets.TEAM_ID }}


jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: build archive
        run: |
          xcodebuild -scheme "I am Groot" \
          -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          
